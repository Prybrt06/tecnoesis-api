generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // id Int @id @default(autoincrement())
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firebaseId String @unique

  firstName   String
  middleName  String @default("")
  lastName    String
  username    String @unique
  email       String @unique
  phoneNumber String

  balance Int

  collegeName    String
  registrationId String?

  imageUrl String

  teamsRegistered TeamRegistration[]

  to   Transaction[] @relation("to")
  from Transaction[] @relation("from")

  // manages   Event[] @relation("manager")
  manages EventManager[]

  // organizes Event[] @relation("organizer")
  organizes EventOrganiser[]
}

model EventManager {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
}

model EventOrganiser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
}

model Team {
  // id Int @id @default(autoincrement())
  id String @id @default(auto()) @map("_id") @db.ObjectId

  teamName String

  registrationStatus RegistrationStatus

  members TeamRegistration[]

  extraInformation Json[]

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
}

model TeamRegistration {
  // id Int @id @default(autoincrement())
  id String @id @default(auto()) @map("_id") @db.ObjectId

  registrationStatus RegistrationStatus
  role               TeamMemberRole

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum RegistrationStatus {
  REGISTERED
  PENDING
  CANCELLED
}

enum TeamMemberRole {
  LEADER
  MEMBER
}

model Module {
  // id Int @id @default(autoincrement())
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String

  iconImage  String
  coverImage String

  thirdPartyURL String?

  events Event[]
}

model Event {
  // id Int @id @default(autoincrement())
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  posterImage String

  maxTeamSize Int
  minTeamSize Int

  registrationIncentive Int @default(0)
  attendanceIncentive   Int @default(0)

  prizeDescription  String
  stagesDescription String
  description       String

  venue String
  lat   String
  lng   String

  // managers   User[] @relation("manager")
  managers EventManager[]

  // organizers User[] @relation("organizer")
  organizers EventOrganiser[]

  registrationStartTime DateTime
  registrationEndTime   DateTime

  extraQuestions Json[] @default([])

  moduleId String @db.ObjectId
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  teams Team[]

  transactions Transaction[]
}

enum TransactionReason {
  ATTENDANCE
  PURCHASE
  REGISTRATION
  ONLINE_EVENT
}

model Transaction {
  // id Int @id @default(autoincrement())
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fromUserId String @db.ObjectId
  from       User   @relation(fields: [fromUserId], references: [id], name: "from", onDelete: Restrict)

  toUserId String @db.ObjectId
  to       User   @relation(fields: [toUserId], references: [id], name: "to", onDelete: Restrict)

  amount Int

  reason      TransactionReason
  description String?

  eventId String? @db.ObjectId
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
}

model Statics {
  // name String @id
  name String @id @map("_id")
  json Json
}

enum TshirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

model SparkTshirt {
  // id             Int        @id @default(autoincrement())
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  scholarId      String?
  isNITS         String
  mobileNumber   String     @unique
  hostelName     String?
  address        String?
  tshirtSize     TshirtSize
  paymentReceipt String
  transactionId  String     @unique
}
